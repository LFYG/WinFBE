2
FBGUI
.bas
SDK: Hello World
' ########################################################################################
' Microsoft Windows
' File: SDK_HelloWord.fbtpl
' Contents: SDK Hello Word example
' Compiler: FreeBasic 32 & 64 bit
' Copyright (c) 2016 José Roca. Freeware. Use at your own risk.
' THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
' EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
' MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.
' ########################################################################################

#INCLUDE ONCE "windows.bi"
#INCLUDE ONCE "Afx/AfxWin.inc"

DECLARE FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                          BYVAL hPrevInstance AS HINSTANCE, _
                          BYVAL szCmdLine AS ZSTRING PTR, _
                          BYVAL nCmdShow AS LONG) AS LONG

   END WinMain(GetModuleHandleW(NULL), NULL, COMMAND(), SW_NORMAL)

' ========================================================================================
' Adjusts the bounding rectangle of a window based on the desired size of the client area.
' ========================================================================================
SUB AfxSetClientSize (BYVAL hwnd AS HWND, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)

   DIM rc      AS RECT
   DIM rcTemp  AS RECT
   DIM hMenu   AS HANDLE
   DIM dwStyle AS DWORD
   DIM cx      AS LONG
   DIM cy      AS LONG

   ' // Convert the client rectangle to a window rectangle.
   ' // The AdjustWindowRectEx function cannot take menu wrapping into account
   ' // because it doesn't know which menu we are using.
   SetRect(@rc, 0, 0, AfxScaleX(nWidth), AfxScaleY(nHeight))
   hMenu   = GetMenu(hwnd)
   dwStyle = GetWindowLongPtr(hwnd, GWL_STYLE)
   AdjustWindowRectEx(@rc, dwStyle, (hMenu <> NULL), GetWindowLongPtr(hwnd, GWL_EXSTYLE))

  ' // If there is a menu, we need to check how much wrapping occurs when we set
  ' // the window to the width specified by AdjustWindowRectEX and an infinite
  ' // amount of height. An infinite height allows us to see every single menu wrap.

   IF hMenu <> NULL THEN
      rcTemp = rc
      rcTemp.Bottom = &H7FFF   ' // "Infinite" height
      SendMessage(hwnd, WM_NCCALCSIZE, 0, cast(LPARAM, @rcTemp))
      ' // Adjust our previous calculation to compensate for menu wrapping.
      rc.Bottom = rc.Bottom + rcTemp.Top
   END IF

   ' // The AdjustWindowRectEx function does not take the WS_VSCROLL or WS_HSCROLL
   ' // styles into account. To account for the scroll bars, we need to call the
   ' // GetSystemMetrics function with SM_CXVSCROLL or SM_CYHSCROLL.
   IF (dwStyle AND WS_HSCROLL) = WS_HSCROLL THEN
      rc.Bottom = rc.Bottom + GetSystemMetrics(SM_CYHSCROLL)
   END IF
   IF (dwStyle AND WS_VSCROLL) = WS_VSCROLL THEN
      rc.Right = rc.Right + GetSystemMetrics(SM_CXVSCROLL)
   END IF
   cx = rc.Right - rc.Left
   cy = rc.Bottom - rc.Top
   SetWindowPos(hwnd, NULL, 0, 0, cx, cy, SWP_NOZORDER OR SWP_NOMOVE OR SWP_NOACTIVATE)

END SUB
' ========================================================================================

' ========================================================================================
' Window procedure
' ========================================================================================
FUNCTION WndProc (BYVAL hWnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT

    SELECT CASE uMsg

       CASE WM_CREATE
          EXIT FUNCTION

      CASE WM_COMMAND
         SELECT CASE LOWORD(wParam)
            ' // If ESC key pressed, close the application sending an WM_CLOSE message
            CASE IDCANCEL
               IF HIWORD(wParam) = BN_CLICKED THEN
                  SendMessageW hwnd, WM_CLOSE, 0, 0
                  EXIT FUNCTION
               END IF
         END SELECT

       CASE WM_PAINT
    		DIM rc AS RECT, ps AS PAINTSTRUCT, hDC AS HANDLE
         hDC = BeginPaint(hWnd, @ps)
         GetClientRect(hWnd, @rc)
         DrawTextW(hDC, "Hello, World!", -1, @rc, DT_SINGLELINE or DT_CENTER or DT_VCENTER)
         EndPaint(hWnd, @ps)
         EXIT FUNCTION

    	CASE WM_DESTROY
         PostQuitMessage(0)
         EXIT FUNCTION

   END SELECT

   FUNCTION = DefWindowProcW(hWnd, uMsg, wParam, lParam)

END FUNCTION
' ========================================================================================

' ========================================================================================
' Main
' ========================================================================================
FUNCTION WinMain (BYVAL hInstance AS HINSTANCE, _
                  BYVAL hPrevInstance AS HINSTANCE, _
                  BYVAL szCmdLine AS ZSTRING PTR, _
                  BYVAL nCmdShow AS LONG) AS LONG

   ' // Set process DPI aware
   AfxSetProcessDPIAware

   DIM wcexw AS WNDCLASSEXW
   DIM hWndMain AS HWND
   DIM wszClassName AS WSTRING * 20 = "HelloWin"

   FUNCTION = 0

   WITH wcexw
      .cbSize        = SIZEOF(wcexw)
      .style         = CS_HREDRAW OR CS_VREDRAW
      .lpfnWndProc   = @WndProc
      .cbClsExtra    = 0
      .cbWndExtra    = 0
      .hInstance     = hInstance
      .hCursor       = LoadCursor(NULL, BYVAL IDC_ARROW)
      .hbrBackground = GetStockObject(WHITE_BRUSH)
      .lpszMenuName  = NULL
      .lpszClassName = @wszClassName
      .hIcon         = LoadIcon(NULL, IDI_APPLICATION)
      .hIconSm       = LoadIcon(NULL, IDI_APPLICATION)
   END WITH

   IF (RegisterClassExW(@wcexw) = FALSE) THEN
      MessageBoxW(NULL, "Failed to register the class", "Error", MB_ICONERROR)
      EXIT FUNCTION
   END IF

   ' // Create a window using the registered class
   hwndMain = CreateWindowExW(WS_EX_CONTROLPARENT, _            ' extended style
                              wszClassName, _                  ' window class name
                              "The Hello Program", _            ' window caption
                              WS_OVERLAPPEDWINDOW OR _
                              WS_CLIPCHILDREN, _                ' window style
                              CW_USEDEFAULT, _                  ' initial x position
                              CW_USEDEFAULT, _                  ' initial y position
                              CW_USEDEFAULT, _                  ' initial x nSize
                              CW_USEDEFAULT, _                  ' initial y nSize
                              NULL, _                           ' parent window handle
                              0, _                              ' window menu handle
                              hInstance, _                      ' program instance handle
                              NULL)                             ' creation parameters

   IF hWndMain = NULL THEN
      MessageBoxW(NULL, "Failure in CreateWindowEx", "Error", MB_ICONERROR)
      EXIT FUNCTION
   END IF

   AfxSetClientSize(hWndMain, 500, 320)
   AfxCenterWindow(hWndMain)

   ShowWindow(hWndMain, nCmdShow)
   UpdateWindow(hWndMain)

   DIM uMsg AS MSG
   WHILE (GetMessageW(@uMsg, NULL, 0, 0) <> FALSE)
      IF IsDialogMessageW(hWndMain, @uMsg) = 0 THEN
         TranslateMessage(@uMsg)
         DispatchMessageW(@uMsg)
      END IF
   WEND

   FUNCTION = uMsg.wParam

END FUNCTION
' ========================================================================================
